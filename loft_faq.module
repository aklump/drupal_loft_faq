<?php
/**
 * @file
 * Base module file for loft_faq
 *
 * @defgroup loft_faq FAQ
 * @{
 */

// autocomplete path for this module
define('LOFT_FAQ_AUTOCOMPLETE', 'ovacue/autocomplete');

/**
 * @var LOFT_FAQ_GROUP_DEFAULT
 * The default group
 */
define('LOFT_FAQ_GROUP_DEFAULT', 'General');

/**
 * @var LOFT_FAQ_NODE_TYPE
 *
 * The default node type to use as an faq
 */
define('LOFT_FAQ_NODE_TYPE', 'loft_faq');

/**
 * @var LOFT_FAQ_PATH_ADMIN_SETTINGS
 *
 * Path to admin settings
 */
define('LOFT_FAQ_PATH_ADMIN_SETTINGS', 'admin/structure/loft-faq');

/**
 * Get functional nodes; these should not be deleted!
 *
 * If nid is provided return bool if this is a core node
 *
 * @return array or bool
 */
function _loft_faq_core_nodes($nid = NULL) {
  $core_nids = array();
  if (variable_get('loft_faq_faq_page_nid', NULL)) {
    $core_nids[] = variable_get('loft_faq_faq_page_nid', NULL);
  }
  if ($nid) {
    return in_array($nid, $core_nids);
  }
  return $core_nids;
}

/**
 * Implements hook_form_alter().
 */
function loft_faq_form_alter(&$form, $form_state, $form_id) {
  if (!empty($form['#node_edit_form']) && _loft_faq_core_nodes($form['nid']['#value'])) {
    unset($form['actions']['delete']);
  }
}

/**
 * Implements hook_help().
 *
 * http://api.drupal.org/api/function/hook_help
 *
 * @param string $path
 *   The router menu path, as defined in hook_menu(), for the help that is
 *   being requested; e.g., 'admin/node' or 'user/edit'. If the router path
 *   includes a % wildcard, then this will appear in $path; for example, node
 *   pages would have $path equal to 'node/%' or 'node/%/view'. Your hook
 *   implementation may also be called with special descriptors after a "#" sign.
 * @param array $arg
 *   An array that corresponds to the return value of the arg() function, for
 *   modules that want to provide help that is specific to certain values of
 *   wildcards in $path. For example, you could provide help for the path
 *   'user/1' by looking for the path 'user/%' and $arg[1] == '1'. This array
 *   should always be used rather than directly invoking arg(), because your
 *   hook implementation may be called for other purposes besides building the
 *   current page's help. Note that depending on which module is invoking
 *   hook_help, $arg may contain only empty strings. Regardless, $arg[0] to
 *   $arg[11] will always be set.
 */
function loft_faq_help($path, $arg) {
  $help = '';
  switch ($path) {
    case 'admin/help#loft_faq':
      $help .= check_markup(file_get_contents(drupal_get_path('module', 'loft_faq') . '/README.txt'), 'plain_text');
      return $help;

    case 'node/%/edit':
      if ($arg[1] == variable_get('loft_faq_faq_page_nid', NULL)) {
        $help = '<p>' . t('The <strong>Frequently Asked Questions</strong> are appended to the content of this node. <a href="@url">Adjust settings.</a>', array('@url' => url(LOFT_FAQ_PATH_ADMIN_SETTINGS))) . '</p>';
      }
      return $help;
  }
}

/**
 * Implements hook_init().
 */
function loft_faq_init() {

  // Identify the node type
  global $_loft_faq_type_;
  $_loft_faq_type_ = variable_get('loft_faq_node_type', LOFT_FAQ_NODE_TYPE);

  if ($_GET['q'] != LOFT_FAQ_PATH_ADMIN_SETTINGS &&
      !($nid = variable_get('loft_faq_faq_page_nid', NULL))) {
    drupal_set_message(t('Please define which node to use as your FAQ page by visiting <a href="@url">@url</a>, or disable the Frequently Asked Questions module.', array('@url' => url(LOFT_FAQ_PATH_ADMIN_SETTINGS))), 'warning', FALSE);
  }
}

/**
 * Implements hook_perm().
 */
function loft_faq_permission() {
  return array(
    'administer loft_faq' => array(
      'title' => t('Administer loft_faq'),
      'description' => t('Perform administration tasks for loft_faq.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function loft_faq_menu() {
  $items = array();

  $items[LOFT_FAQ_PATH_ADMIN_SETTINGS] = array(
    'title' => 'FAQ settings',
    'description' => 'Configure how FAQ behaves.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('loft_faq_admin_settings'),
    'file' => 'loft_faq.admin.inc',
    'access arguments' => array('administer loft_faq'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items[LOFT_FAQ_AUTOCOMPLETE] = array(
    'title' => 'Ovacue autocomplete',
    'page callback' => 'loft_faq_autocomplete',
    'access arguments' => array('administer content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementats hook_preprocess_html().
 */
function loft_faq_preprocess_html(&$vars) {
  if (arg(0) == 'node' && ($nid = arg(1)) && $nid == variable_get('loft_faq_faq_page_nid', NULL)) {
    $vars['classes_array'][] = 'loft-faq-page';
  }
}

/**
 * Determine first and last classes
 *
 * @param string $key
 *   A unique id for this batch
 * @param array
 *   This is the array of all items to monitor
 */
function _loft_faq_get_iteration_classes($key, $array) {
  static $progress = array();
  $classes = array();
  if (empty($progress[$key])) {
    $progress[$key] = 1;
    $classes[] = 'first';
  }
  if (count($array) == $progress[$key]) {
    $classes[] = 'last';
  }
  ++$progress[$key];
  return $classes;
}

/**
 * Implements hook_loft_faq_node_append().
 */
function loft_faq_loft_faq_node_append() {
  return array(
    array(
      'nid' => variable_get('loft_faq_faq_page_nid', NULL),
    )
  );
}

/**
 * Implements hook_node_view().
 */
function loft_faq_node_view($node, $view_mode, $langcode) {

  // Determine which nids to append faqs to
  $append = module_invoke_all('loft_faq_node_append');

  // Cycle through to see if this node is there
  foreach ($append as $config) {

    $config += array(
      'nid' => NULL,
      'toc' => TRUE,
      'categories' => array(),
      'title' => '',
      'not_categories' => array(),
      'title_display' => 'before',
    );

    // We need to append to this node
    if ($config['nid'] == $node->nid) {

      // Add a link
      if (user_access('create loft_faq content')) {
        $node->content['links']['loft_faq_add_faq'] = array(
          '#links' => array(
            array(
              'title' => 'Add Another FAQ',
              'href' => 'node/add/loft-faq',
              'query' => drupal_get_destination(),
              'attributes' => array('class' => 'loft-faq-add-link'),
            ),
          ),
        );
      }

      // Try to load categories...
      if (!($categories = loft_faq_get_faq_categories())

          // Filter categories
          || (array_key_exists('categories', $config)
              && is_array($config['categories'])
              && count($config['categories'])
              && !($categories = array_intersect($config['categories'], $categories)))

          // Remove not_categories
          || (array_key_exists('not_categories', $config)
              && is_array($config['not_categories'])
              && count($config['not_categories'])
              && !($categories = array_diff($categories, $config['not_categories'])))){
        // The filter removed all categories so we're done here
        return;
      };

      $toc = $list = array();
      foreach ($categories as $category) {
        $category = empty($category)
          ? variable_get('loft_faq_group_default', LOFT_FAQ_GROUP_DEFAULT)
          : $category;
        $category_safe = check_plain($category);
        $index = 1;
        $anchor = loft_faq_css_safe($category);
        $items = array();
        if ($nodes = loft_faq_get_faq_by_category($category)) {
          $toc[$anchor] = $category_safe;
          foreach ($nodes as $faq_node) {
            $item = array(
              '#theme' => 'loft_faq_item',
              '#category' => $category_safe,
              '#anchor' => $anchor,
              '#node' => $faq_node,
            );

            //@todo Can't figure this out yet ...
            //$item['#contextual_links']['loft_faq'] = array('node', array($faq_node->nid, 'edit'));

            drupal_alter('loft_faq_item', $item);
            $items[] = $item;
          }
          if ($items) {
            $classes = _loft_faq_get_iteration_classes('categories', $categories);
            $classes[] = 'loft-faq-category-wrapper';
            $classes[] = $anchor;
            $list[] = array(
              '#theme' => 'loft_faq_list',
              '#category' => empty($config['title']) ? $category_safe : $config['title'],
              '#title_display' => $config['title_display'],
              '#has_toc' => $config['toc'],
              '#anchor' => $anchor,
              '#items' => $items,
              '#wrapper_attributes' => array(
                'class' => $classes,
              ),
            );
          }
        }
      }

      $weight = $node->content['body']['#weight'];

      // Append the TOC?
      if ($config['toc']) {
        $node->content['loft_faq_toc'] = array(
          '#theme' => 'loft_faq_toc',
          '#items' => $toc,
          '#weight' => ++$weight,
        );
      }

      $node->content['loft_faq_list'] = array('#weight' => ++$weight) + $list;

      $node->content['loft_faq_list']['#attached']['library'][] = array('loft_faq', 'loft_faq');
    }
  }
}

/**
 * Implements hook_library().
 */
function loft_faq_library() {
  return array(
    'loft_faq' => array(
      'title' => 'Loft FAQ',
      'version' => '1.0',
      'js' => array(
        drupal_get_path('module', 'loft_faq') . '/js/jquery.scrolling_anchors.js' => array(),
        drupal_get_path('module', 'loft_faq') . '/js/loft_faq.js' => array(),
      ),
      'css' => array(
        drupal_get_path('module', 'loft_faq') . '/css/loft_faq.css' => array(
          'type' => 'file',
          'media' => 'screen',
        )
      ),
    )
  );
}

/**
 * Implements hook_preprocess_loft_faq_item().
 */
function loft_faq_preprocess_loft_faq_item(&$vars) {
  $node = $vars['elements']['#node'];

  //menu_contextual_links()
  $vars['links'] = array(
    '#type' => 'contextual_links',
    // Each key is the name of the implementing module, and each value is an
    // array that forms the function arguments for menu_contextual_links()
    '#contextual_links' => array(
      'loft_faq' => array('node/' . $node->nid, array()),
    ),
  );

  $vars['question'] = array('#markup' => check_plain($node->title));
  $vars['answer'] = field_view_value('node', $node, 'body', $node->body['und'][0]);
}

/**
 * Implements hook_theme().
 */
function loft_faq_theme($existing, $type, $theme, $path) {
  return array(
    'loft_faq_toc' => array(
      'variables' => array('items' => array()),
      'template' => 'templates/loft_faq-toc',
    ),
    'loft_faq_list' => array(
      'variables' => array(
        'has_toc' => TRUE,
        'category' => NULL,
        'title_display' => 'before',
        'anchor' => NULL,
        'items' => array(),
        'wrapper_attributes' => array()
      ),
      'template' => 'templates/loft_faq-list',
    ),
    'loft_faq_item' => array(
      'render element' => 'elements',
      'template' => 'templates/loft_faq-item',
    ),
  );
}

/**
 * Get a list of faq nodes by category
 *
 * They are ordered by weight field
 *
 * @param string $category
 *
 * @return array
 * - an array of nodes keyed by nid
 */
function loft_faq_get_faq_by_category($category, $reset = FALSE) {
  global $_loft_faq_type_;
  $faq = &drupal_static(__FUNCTION__, array());
  if (!array_key_exists($category, $faq)) {
    $faq[$category] = array();
    $node_type = variable_get('loft_faq_node_type', LOFT_FAQ_NODE_TYPE);
    if ($category) {
      $view_category = $category;
      if ($category == variable_get('loft_faq_group_default', LOFT_FAQ_GROUP_DEFAULT)) {
        $view_category = '';
      }
    }
    if ($view_category) {
      $result = (array) views_get_view_result(
        'loft_faq',
        'default',
        $node_type,
        $view_category
      );
    }
    else {
      $result = (array) views_get_view_result(
        'loft_faq',
        'default',
        $node_type
      );
    }

    foreach ($result as $data) {
      $faq[$category][$data->nid] = node_load($data->nid);
    }
  }
  return $faq[$category];
}

/**
 * Get an array of FAQ categories
 *
 * @return array
 *   keys are irrelevant, values are human names
 */
function loft_faq_get_faq_categories($reset = FALSE) {
  global $_loft_faq_type_;
  static $categories;
  if (empty($categories) || $reset) {
    $result = (array) views_get_view_result(
      variable_get('loft_faq_node_type', LOFT_FAQ_NODE_TYPE),
      'default',
      $_loft_faq_type_
    );
    $categories = array();
    $default = variable_get('loft_faq_group_default', LOFT_FAQ_GROUP_DEFAULT);
    foreach ($result as $data) {
      $node = node_load($data->nid);
      //empty category
      if (!($category = loft_faq_get_node_category($node))) {
        $category = loft_faq_set_node_category($default);
      }
      if (!in_array($category, $categories)) {
        $categories[] = $category;
      }
    }
    asort($categories);
  }

  return $categories;
}

/**
 * Make a css safe class or id
 *
 * @param string or array $input
 *   The string will be made css safe; array values will be made css safe
 * @param bool $flatten
 *   Optional.  Set to TRUE to flatten arrays into space separated strings
 *
 * @return string or array
 */
function loft_faq_css_safe($input, $flatten = FALSE) {
  if (is_array($input)) {
    $function = __FUNCTION__;
    foreach ($input as $key => $value) {
      $input[$key] = $function($value);
    }
    return $flatten ? trim(implode(' ', $input)) : $input;
  }
  elseif (is_string($input)) {
    return trim(drupal_strtolower(preg_replace('/[\W_]+/', '-', $input)), '-');
  }
  return $input;
}

/**
 * Implements hook_form_alter().
 */
function loft_faq_form_loft_faq_node_form_alter(&$form, $form_state) {
  $form['field_group']['und'][0]['value']['#autocomplete_path'] = LOFT_FAQ_AUTOCOMPLETE . '/loft_faq/group';
}

/**
 * Implements hook_node_presave().
 */
function loft_faq_node_presave($node) {

  global $_loft_faq_type_;
  if ($node->type == $_loft_faq_type_) {
    //for flexibility sake (changing the default group on the fly from admin and
    //quick updates) we don't want to actually record teh default group to the
    //db, we'll leave it blank and insert the default on load, etc.
    if (($default = variable_get('loft_faq_group_default', LOFT_FAQ_GROUP_DEFAULT))
        && $default == loft_faq_get_node_category($node)) {
      loft_faq_set_node_category($node, NULL);
    }
  }
}

/**
 * Implements hook_node_load().
 */
function loft_faq_node_load($nodes, $types) {
  global $_loft_faq_type_;
  if (!in_array($_loft_faq_type_, $types)) {
    return;
  }
  $default = variable_get('loft_faq_group_default', LOFT_FAQ_GROUP_DEFAULT);
  foreach ($nodes as $node) {
    if ($default && !loft_faq_get_node_category($node)) {
      loft_faq_set_node_category($node, $default);
    }
  }
}

/**
 * Get the category of a node
 *
 * @param object $node
 *
 * @return string
 */
function loft_faq_get_node_category($node) {
  $category = empty($node->field_group['und'][0]['value']) ? NULL : trim($node->field_group['und'][0]['value']);
  drupal_alter('loft_faq_get_node_category', $category, $node);
  return $category;
}

/**
 * Set the category of a node
 *
 * @param object $node
 * @param string $category
 *
 * @return string
 */
function loft_faq_set_node_category($node, $category) {
  $node->field_group['und'][0]['value'] = $category;
  if (array_key_exists('safe_value', $node->field_group['und'][0])) {
    $node->field_group['und'][0]['safe_value'] = trim(check_plain($category));
  }
  drupal_alter('loft_faq_set_category', $category, $node);
  return $category;
}

/**
 * Determine if the faq is in a certain category
 *
 * @param object $node
 * @param string $category
 *
 * @return bool
 */
function loft_faq_in_category($node, $category) {
  if ($has = loft_faq_get_node_category($node)) {
    return $category == $has;
  }
  return FALSE;
}

/**
 * Implements hook_sort_views_views().
 *
 * Define any views that you wish to be sortable
 *
 * Each key of the array is a view name that you want to enable sorting on
 *
 * Each element is an array with the following keys:
 * - sort_field: the fieldname that is used by the node type(s) to store the
 *   sorting index, should be a field of type integar textfield
 *
 * @return array()
 */
function loft_faq_sort_views_views() {
  global $_loft_faq_type_;
  return array(
    $_loft_faq_type_ => array(
      'sort_field' => 'field_sort',
    ),
  );
}

/**
 * Return the list of autocomplete suggestions
 *
 * @param string $node_type
 * @param string $field
 * @param string $string
 *   The user input
 *
 * @return json
 */
function loft_faq_autocomplete($node_type, $field, $string = '') {
  global $_loft_faq_type_;
  $matches = array();
  if ($string) {
    $suggestions = array();
    switch ($node_type) {
      case $_loft_faq_type_:
        switch ($field) {

          //find all the matching fieldgroups
          case 'group':
            foreach (loft_faq_get_faq_categories() as $category) {
              //the string is anywhere in the choice
              if (stristr($category, $string) !== FALSE) {
                $suggestions[$category] = $category;
              }
            }
            break;
        }
        break;
    }
  }
  drupal_json_output($suggestions);
  exit();
}
