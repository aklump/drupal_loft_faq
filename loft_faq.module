<?php
// $Id$ 

/** 
 * @file 
 * Base module file for loft_faq
 *
 * @defgroup loft_faq FAQ
 * @{
 */

// autocomplete path for this module
define('LOFT_FAQ_AUTOCOMPLETE', 'ovacue/autocomplete/');

/**
 * Get functional nodes; these should not be deleted!
 *
 * If nid is provided return bool if this is a core node
 *
 * @return array or bool
 */
function _loft_faq_core_nodes($nid = NULL) {
  $core_nids = array();
  if (variable_get('loft_faq_faq_page_nid', NULL)) {
    $core_nids[] = variable_get('loft_faq_faq_page_nid', NULL); 
  }
  if ($nid) {
    return in_array($nid, $core_nids);
  }
  return $core_nids;
}

/**
 * Implementation of hook_form_alter
 */
function loft_faq_form_alter(&$form, $form_state, $form_id) {
  if (!empty($form['#node_edit_form']) && _loft_faq_core_nodes($form['nid']['#value'])) {
    unset($form['actions']['delete']);
  }
}

/**
 * Implementation of hook_help()
 *
 * http://api.drupal.org/api/function/hook_help
 *
 * @param string $path
 *   The router menu path, as defined in hook_menu(), for the help that is
 *   being requested; e.g., 'admin/node' or 'user/edit'. If the router path
 *   includes a % wildcard, then this will appear in $path; for example, node
 *   pages would have $path equal to 'node/%' or 'node/%/view'. Your hook
 *   implementation may also be called with special descriptors after a "#" sign.
 * @param array $arg
 *   An array that corresponds to the return value of the arg() function, for
 *   modules that want to provide help that is specific to certain values of
 *   wildcards in $path. For example, you could provide help for the path
 *   'user/1' by looking for the path 'user/%' and $arg[1] == '1'. This array
 *   should always be used rather than directly invoking arg(), because your
 *   hook implementation may be called for other purposes besides building the
 *   current page's help. Note that depending on which module is invoking
 *   hook_help, $arg may contain only empty strings. Regardless, $arg[0] to
 *   $arg[11] will always be set.
 */
function loft_faq_help($path, $arg) {
  switch ($path) {
    case 'admin/help#loft_faq':
      $help = '';
      $help .= check_markup(file_get_contents(drupal_get_path('module', 'loft_faq') . '/README.txt'), 'plain_text');
      return $help;
  }
}

/**
 * Implementation of hook_init()
 */
function loft_faq_init() {
  if (variable_get('loft_faq_faq_page_nid', NULL) === NULL) {
    drupal_set_message(t('Please define which node to use as your FAQ page by visiting <a href="@url">@url</a>, or disable the Frequently Asked Questions module.', array('@url' => url('admin/structure/loft-faq'))), 'warning', FALSE);
  }
}

/**
 * Implementation of hook_perm()
 */
function loft_faq_permission() {
  return array(
    'administer loft_faq' => array(
      'title' => t('Administer loft_faq'), 
      'description' => t('Perform administration tasks for loft_faq.'),
    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function loft_faq_menu() {
  $items = array();
  
  $items['admin/structure/loft-faq'] = array(
    'title' => 'FAQ settings',
    'description' => 'Configure how FAQ behaves.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('loft_faq_admin_settings'),
    'file' => 'loft_faq.admin.inc',
    'access arguments' => array('administer loft_faq'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items[LOFT_FAQ_AUTOCOMPLETE] = array(
    'title' => 'Ovacue autocomplete',
    'page callback' => 'loft_faq_autocomplete',
    'access arguments' => array('administer content'),
    'type' => MENU_CALLBACK,
  );  

  return $items;
}

/**
 * Implementation of hook_preprocess_node()
 */
function loft_faq_preprocess_node(&$vars) {
  $node = $vars['node'];
  
  /**
   * FAQs PAGE
   */
  if ($node->nid == variable_get('loft_faq_faq_page_nid', NULL)) {
    $output = '';
    
    //create the index
    $index = array();

    $view_name = 'loft_faq';
    $display_id = 'default';
    $view = views_get_view($view_name);
    
    foreach (loft_faq_get_faq_categories() as $argument => $category) {
      $index[] = '<a href="#' . loft_faq_css_safe($argument) . '">' . $category . ' ' . t('FAQs') . '</a>';
      
      //append the argumented view to the output
      //embed a view with arguments
      if (views_get_view_result($view_name, $display_id, $argument)) {
        $output .= '<a name="' . loft_faq_css_safe($argument) . '"></a>';
        $output .= '<div class="loft-faqs-wrapper ' . loft_faq_css_safe($argument) . '">';
        $view->set_display($display_id);
        $view->set_arguments($argument);
        $output .= '<h2 class="view-title loft-faq-category">' . $category . '</h2>';
        $output .= views_embed_view($view_name, $display_id, $argument) . "\n";
        $output .= '</div> <!-- /loft-faqs-wrapper ' . loft_faq_css_safe($argument) . ' -->' . "\n";
        
        drupal_add_js(drupal_get_path('module', 'loft_faq') . '/loft_faq.js', 'file');
      }
    }
    
    //append the index
    $vars['content']['body'][0]['#markup'] .= theme('item_list', array(
      'items' => $index,
      'type' => 'ol',
      'attributes' => array(
        'class' => 'loft-faq-toc',
      ),
    )) . "\n";
    
    //append the faqs
    $vars['content']['body'][0]['#markup'] .= $output;
    
  }
}

/**
 * Get an array of FAQ categories
 *
 * @return array
 *   keys are numerical, values are human names
 */
function loft_faq_get_faq_categories($reset = FALSE) {
  static $categories;
  if (empty($categories) || $reset) {
    $view_name = 'loft_faq';
    $display_id = 'default';
    $result = views_get_view_result($view_name, $display_id);
    $categories = array();
    foreach ($result as $data) {
      $node = node_load($data->nid);
      //empty category
      if (empty($node->field_group['und'][0]['value'])) {
        $node->field_group['und'][0]['value'] = t('General');
      }
      $categories[$node->field_group['und'][0]['value']] = $node->field_group['und'][0]['safe_value'];
    }
    asort($categories);      
  }
  return $categories;
}

/**
 * Get the category of a node
 *
 * @param object $node
 * @param string $type
 *   - defaults to 'value', which is hte machine value
 *   - set to 'safe', to the get the display value
 *
 * @return string
 */
function loft_faq_get_node_category($node, $type = NULL) {
  if (!isset($node->field_group['und'][0])) {
    return NULL;
  }
  if ($type !== NULL) {
    return isset($node->field_group['und'][0][$type]) ? $node->field_group['und'][0][$type] : NULL;
  }
  return $node->field_group['und'][0];
}

/**
 * Determine if the faq is in a certain category
 *
 * @param object $node
 * @param string $category
 *
 * @return bool
 */
function loft_faq_in_category($node, $category) {
  if ($has = loft_faq_get_node_category($node, 'value')) {
    return $category == $has;
  }
  return FALSE;
}

/**
 * Make a css safe class or id
 *
 * @param string or array $input
 *   The string will be made css safe; array values will be made css safe
 * @param bool $flatten
 *   Optional.  Set to TRUE to flatten arrays into space separated strings
 *
 * @return string or array
 */
function loft_faq_css_safe($input, $flatten = FALSE) {
  if (is_array($input)) {
    $function = __FUNCTION__;
    foreach ($input as $key => $value) {
      $input[$key] = $function($value);
    }
    return $flatten ? trim(implode(' ', $input)) : $input;
  }
  elseif (is_string($input)) {
    return trim(strtolower(preg_replace('/[\W_]+/', '-', $input)), '-');
  }
  return $input;
}

/**
 * Implementation of hook_sort_views_views
 *
 * Define any views that you wish to be sortable
 *
 * Each key of the array is a view name that you want to enable sorting on
 *
 * Each element is an array with the following keys:
 * - sort_field: the fieldname that is used by the node type(s) to store the
 *   sorting index, should be a field of type integar textfield
 *
 * @return array()
 */
function loft_faq_sort_views_views() {
  return array(
    'loft_faq' => array(
      'sort_field' => 'field_sort',
    ),
  );
}

/**
 * Implementation of hook_form_alter
 */
function loft_faq_form_loft_faq_node_form_alter(&$form, $form_state) {
  $form['field_group']['und'][0]['value']['#autocomplete_path'] = LOFT_FAQ_AUTOCOMPLETE . '/loft_faq/group';
}

/**
 * Return the list of autocomplete suggestions
 *
 * @param string $node_type
 * @param string $field
 * @param string $string
 *   The user input
 *
 * @return json
 */
function loft_faq_autocomplete($node_type, $field, $string = '') {
  $matches = array();
  if ($string) {
    $suggestions = array();
    switch ($node_type) {
      case 'loft_faq':
        switch ($field) {
          
          //find all the matching fieldgroups
          case 'group':
            foreach (loft_faq_get_faq_categories() as $category) {
              //the string is anywhere in the choice
              if (stristr($category, $string) !== FALSE) {
                $suggestions[$category] = $category;
              }
            }              
            break;
        }
        break;
    }
  }
  drupal_json_output($suggestions);
  exit();
}