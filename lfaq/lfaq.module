<?php
/**
 * @file
 * Provides a "lfaq" node type.
 */

/**
 * Implementation of hook_node_info().
 */
function lfaq_node_info() {
  // We return an array since a module can define multiple node types.
  // We're only defining one node type, type 'lfaq'.
  return array(
    'lfaq' => array(
      'name' => t('FAQ'), // Required.
      'module' => 'lfaq',  // Required.
      'description' => t('Add FAQ content to the website.'), // Required.
      'has_title' => TRUE,
      'title_label' => t('Question'),
      'has_body' => TRUE,
      'body_label' => t('Answer'),
      'min_word_count' => 1,
      'locked' => TRUE
    )
  );
}

/**
 * Implementation of hook_perm().
 */
function lfaq_perm() {
  return array('create lfaq', 'edit own lfaq', 'edit any lfaq', 'delete own lfaq', 'delete any lfaq');
}

/**
 * Implementation of hook_access().
 */
function lfaq_access($op, $node, $account) {
  $is_author = $account->uid == $node->uid;
  switch ($op) {
    case 'create':
      // Allow if user's role has 'create lfaq' permission.
      return user_access('create lfaq', $account);

    case 'update':
      // Allow if user's role has 'edit own lfaq' permission and user is
      // the author; or if the user's role has 'edit any lfaq' permission.
      return user_access('edit own lfaq', $account) && is_author ||
        user_access('edit any lfaq', $account);
    case 'delete':
      // Allow if user's role has 'delete own lfaq' permission and user is
      // the author; or if the user's role has 'delete any lfaq' permission.
      return user_access('delete own lfaq', $account) && $is_author ||
        user_access('delete any lfaq', $account);
  }
}

/**
 * Implementation of hook_form().
 */
function lfaq_form($node) {
  // Get metadata for this node type
  // (we use it for labeling title and body fields).
  // We defined this in lfaq_node_info().
  $type = node_get_types('type', $node);

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#maxlength' => 255,
  );
  $form['group'] = array(
    '#type' => 'textfield',
    '#title' => t('Question Topic'),
    '#default_value' => isset($node->group) ? $node->group : '',
    '#required' => TRUE,
  );
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#default_value' => $node->body,
    '#rows' => 7,
    '#required' => TRUE
  );
  $form['body_filter']['filter'] = filter_form($node->format);
  //$form['body_filter']['#weight'] = -10;
  $form['weight'] = array(
    '#type' => 'weight',
    '#delta' => 40,
    '#title' => t('Sorting Weight'),
    '#required' => TRUE,
    '#default_value' => isset($node->weight) ? $node->weight : 0,
  );
  return $form;
}
/**
 * Implementation of hook_form_alter
 */
function lfaq_form_alter(&$form, $form_state) {
  $form['group']['#weight'] = -20;
  $form['body_filter']['#weight'] = -3;
  $form['weight']['#weight'] = -3;
}

/**
 * Implementation of hook_insert().
 */
function lfaq_insert($node) {
  db_query("INSERT INTO {lfaq} (nid, vid, weight, `group`) VALUES (%d, %d, '%s', '%s')",
    $node->nid, $node->vid, $node->weight, $node->group);
}

/**
 * Implementation of hook_update().
 */
function lfaq_update($node) {
  if ($node->revision) {
    // New revision; treat it as a new record.
    lfaq_insert($node);
  }
  else {
    db_query("UPDATE {lfaq} SET weight = '%s', `group` = '%s' WHERE vid = %d",
      $node->weight, $node->group, $node->vid);
  }
}

/**
 * Implementation of hook_delete().
 */
function lfaq_delete($node) {
  // Delete the related information we were saving for this node.
  db_query('DELETE FROM {lfaq} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function lfaq_load($node) {
  return db_fetch_object(db_query('SELECT weight, `group` FROM {lfaq} WHERE vid = %d',
    $node->vid));
}
